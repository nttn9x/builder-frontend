{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/graphql-tag/src/index.js","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/polyfills/symbols.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../parser.js","../OperationData.js"],"names":["_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","parse","require","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","prototype","toString","call","map","d","loc","startToken","endToken","key","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","push","processFragments","gql","args","Array","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports","devAssert","condition","message","Boolean","_typeof","obj","Symbol","iterator","constructor","asyncIterator","SYMBOL_TO_STRING_TAG","toStringTag","getLocation","position","match","lineRegexp","line","column","exec","index","printLocation","location","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","concat","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","printPrefixedLines","subLine","existingLines","filter","_ref","undefined","padLen","max","apply","_ref2","_ref3","str","prefix","join","len","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","fn","Function","indexOf","TypeError","has","get","set","Wrapper","_construct","_getPrototypeOf","this","create","_setPrototypeOf","Parent","_isNativeReflectConstruct","Reflect","construct","a","instance","bind","sham","Proxy","Date","e","o","p","setPrototypeOf","__proto__","getPrototypeOf","GraphQLError","_Error","subClass","superClass","_inherits","Constructor","protoProps","staticProps","_super","Derived","hasNativeReflectConstruct","Super","NewTarget","_createSuper","nodes","positions","path","originalError","extensions","_locations2","_source2","_positions2","_extensions2","_this","_classCallCheck","_nodes$0$loc","_nodes","isArray","_source","_locations","_positions","reduce","list","node","pos","_extensions","originalExtensions","locations","stack","captureStackTrace","error","output","_i2","_error$nodes2","_i4","_error$locations2","printError","syntaxError","description","Kind","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Source","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","Lexer","startOfFileToken","Token","lastToken","token","lineStart","_proto","advance","lookahead","_token$next","next","readToken","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toUpperCase","lexer","prev","bodyLength","startPosition","charCodeAt","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","isNameStart","readNumber","chunkStart","rawValue","dedentBlockStringValue","readBlockString","charCode","b","c","char2hex","invalidSequence","readString","unexpectedCharacterMessage","options","Parser","parseValue","parser","expectToken","parseValueLiteral","parseType","type","parseTypeReference","sourceObj","inspect","_lexer","_options","parseName","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","defaultValue","expectOptionalToken","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","parseList","parseObject","parseStringLiteral","block","values","any","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","_this$_options2","allowLegacySDLImplementsInterfaces","_this$_options3","allowLegacySDLEmptyFields","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","_this$_options4","noLocation","Location","getTokenKindDesc","getTokenDesc","atToken","openKind","parseFn","closeKind","isPunctuatorTokenKind","DocumentType","cache","operationName","Query","Mutation","Subscription","document","variables","cached","fragments","x","queries","mutations","subscriptions","OperationData","context","isMounted","previousOptions","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType"],"mappings":"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","file":"static/js/0.f3e33d5a.chunk.js","sourcesContent":["export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","// In ES2015 (or a polyfilled) environment, this will be Symbol.iterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\nexport var SYMBOL_ITERATOR = typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'; // In ES2017 (or a polyfilled) environment, this will be Symbol.asyncIterator\n// istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_ASYNC_ITERATOR = // $FlowFixMe Flow doesn't define `Symbol.asyncIterator` yet\ntypeof Symbol === 'function' ? Symbol.asyncIterator : '@@asyncIterator'; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\nexport var SYMBOL_TO_STRING_TAG = // $FlowFixMe Flow doesn't define `Symbol.toStringTag` yet\ntypeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag';\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from \"./location.mjs\";\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var subLineIndex = Math.floor(columnNum / 80);\n    var subLineColumnNum = columnNum % 80;\n    var subLines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function (subLine) {\n      return ['', subLine];\n    }), [[' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return leftPad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction leftPad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// FIXME:\n// flowlint uninitialized-instance-property:off\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport { getLocation } from \"../language/location.mjs\";\nimport { printLocation, printSourceLocation } from \"../language/printLocation.mjs\";\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport var GraphQLError = /*#__PURE__*/function (_Error) {\n  _inherits(GraphQLError, _Error);\n\n  var _super = _createSuper(GraphQLError);\n\n  /**\n   * A message describing the Error for debugging purposes.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   *\n   * Note: should be treated as readonly, despite invariant usage.\n   */\n\n  /**\n   * An array of { line, column } locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  function GraphQLError(message, nodes, source, positions, path, originalError, extensions) {\n    var _locations2, _source2, _positions2, _extensions2;\n\n    var _this;\n\n    _classCallCheck(this, GraphQLError);\n\n    _this = _super.call(this, message); // Compute list of blame nodes.\n\n    var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n    var _source = source;\n\n    if (!_source && _nodes) {\n      var _nodes$0$loc;\n\n      _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;\n    }\n\n    var _positions = positions;\n\n    if (!_positions && _nodes) {\n      _positions = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(node.loc.start);\n        }\n\n        return list;\n      }, []);\n    }\n\n    if (_positions && _positions.length === 0) {\n      _positions = undefined;\n    }\n\n    var _locations;\n\n    if (positions && source) {\n      _locations = positions.map(function (pos) {\n        return getLocation(source, pos);\n      });\n    } else if (_nodes) {\n      _locations = _nodes.reduce(function (list, node) {\n        if (node.loc) {\n          list.push(getLocation(node.loc.source, node.loc.start));\n        }\n\n        return list;\n      }, []);\n    }\n\n    var _extensions = extensions;\n\n    if (_extensions == null && originalError != null) {\n      var originalExtensions = originalError.extensions;\n\n      if (isObjectLike(originalExtensions)) {\n        _extensions = originalExtensions;\n      }\n    }\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      name: {\n        value: 'GraphQLError'\n      },\n      message: {\n        value: message,\n        // By being enumerable, JSON.stringify will include `message` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: true,\n        writable: true\n      },\n      locations: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : undefined,\n        // By being enumerable, JSON.stringify will include `locations` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _locations != null\n      },\n      path: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: path !== null && path !== void 0 ? path : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: path != null\n      },\n      nodes: {\n        value: _nodes !== null && _nodes !== void 0 ? _nodes : undefined\n      },\n      source: {\n        value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : undefined\n      },\n      positions: {\n        value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : undefined\n      },\n      originalError: {\n        value: originalError\n      },\n      extensions: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _extensions != null\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    if (originalError === null || originalError === void 0 ? void 0 : originalError.stack) {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n      return _possibleConstructorReturn(_this);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);\n    } else {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n\n    return _this;\n  }\n\n  _createClass(GraphQLError, [{\n    key: \"toString\",\n    value: function toString() {\n      return printError(this);\n    } // FIXME: workaround to not break chai comparisons, should be remove in v16\n    // $FlowFixMe Flow doesn't support computed properties yet\n\n  }, {\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Object';\n    }\n  }]);\n\n  return GraphQLError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport var Source = /*#__PURE__*/function () {\n  function Source(body) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';\n    var locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      line: 1,\n      column: 1\n    };\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive.');\n  } // $FlowFixMe Flow doesn't support computed properties yet\n\n\n  _createClass(Source, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'Source';\n    }\n  }]);\n\n  return Source;\n}();\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { Source } from \"./source.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj), \".\"));\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        var _this$_options2;\n\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging\n */\n\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n","import { invariant } from 'ts-invariant';\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\");\n    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });\n    var queries = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'query';\n    });\n    var mutations = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n    });\n    var subscriptions = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n    });\n    invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\");\n    invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") +\n        (\"subscriptions and \" + mutations.length + \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" +\n        (definitions.length + \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\n//# sourceMappingURL=parser.js.map","import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from '../parser/parser';\nvar OperationData = (function () {\n    function OperationData(options, context) {\n        this.isMounted = false;\n        this.previousOptions = {};\n        this.context = {};\n        this.options = {};\n        this.options = options || {};\n        this.context = context || {};\n    }\n    OperationData.prototype.getOptions = function () {\n        return this.options;\n    };\n    OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n        if (storePrevious === void 0) { storePrevious = false; }\n        if (storePrevious && !equal(this.options, newOptions)) {\n            this.previousOptions = this.options;\n        }\n        this.options = newOptions;\n    };\n    OperationData.prototype.unmount = function () {\n        this.isMounted = false;\n    };\n    OperationData.prototype.refreshClient = function () {\n        var client = (this.options && this.options.client) ||\n            (this.context && this.context.client);\n        invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n            'Wrap the root component in an <ApolloProvider>, or pass an ' +\n            'ApolloClient instance in via options.');\n        var isNew = false;\n        if (client !== this.client) {\n            isNew = true;\n            this.client = client;\n            this.cleanup();\n        }\n        return {\n            client: this.client,\n            isNew: isNew\n        };\n    };\n    OperationData.prototype.verifyDocumentType = function (document, type) {\n        var operation = parser(document);\n        var requiredOperationName = operationName(type);\n        var usedOperationName = operationName(operation.type);\n        invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" +\n            (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n    };\n    return OperationData;\n}());\nexport { OperationData };\n//# sourceMappingURL=OperationData.js.map"],"sourceRoot":""}